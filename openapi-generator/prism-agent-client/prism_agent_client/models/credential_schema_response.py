import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union, cast

import attr
from dateutil.parser import isoparse

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.proof import Proof


T = TypeVar("T", bound="CredentialSchemaResponse")


@attr.s(auto_attribs=True)
class CredentialSchemaResponse:
    """
    Example:
        {'schema': {'$id': 'driving-license-1.0', '$schema': 'https://json-schema.org/draft/2020-12/schema',
            'description': 'Driving License', 'type': 'object', 'properties': {'credentialSubject': {'type': 'object',
            'properties': {'emailAddress': {'type': 'string', 'format': 'email'}, 'givenName': {'type': 'string'},
            'familyName': {'type': 'string'}, 'dateOfIssuance': {'type': 'datetime'}, 'drivingLicenseID': {'type':
            'string'}, 'drivingClass': {'type': 'integer'}, 'required': ['emailAddress', 'familyName', 'dateOfIssuance',
            'drivingLicenseID', 'drivingClass'], 'additionalProperties': True}}}}, 'authored': datetime.datetime(2022, 3,
            10, 12, 0, tzinfo=datetime.timezone.utc), 'author':
            'did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff', 'kind': 'CredentialSchema',
            'description': 'Simple credential schema for the driving licence verifiable credential.', 'longId': 'did:prism:4
            a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff/0527aea1-d131-3948-a34d-
            03af39aba8b4?version=1.0.0', 'type': 'https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json',
            'version': '1.0.0', 'tags': ['tags', 'tags'], 'name': 'DrivingLicense', 'guid':
            '0527aea1-d131-3948-a34d-03af39aba8b4', 'self': '/prism-agent/schema-
            registry/schemas/0527aea1-d131-3948-a34d-03af39aba8b4', 'id': '0527aea1-d131-3948-a34d-03af39aba8b5', 'proof':
            {'type': 'Ed25519Signature2018', 'created': datetime.datetime(2022, 3, 10, 12, 0, tzinfo=datetime.timezone.utc),
            'verificationMethod': 'did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff#key-1',
            'proofPurpose': 'assertionMethod', 'proofValue': 'FiPfjknHikKmZ...', 'jws':
            'eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il0sImt0eSI6Ik...', 'domain': 'prims.atala.com'}}

    Attributes:
        guid (str): Globally unique id of the credential schema.It's composed from the bytes of the string that contain
            the `author`, `name`, and `version` values.The string format looks like the resource identifier:
            `author`/`id`?version=`version` Example: 0527aea1-d131-3948-a34d-03af39aba8b4.
        id (str): A locally unique identifier to address the schema. UUID is generated by the backend. Example:
            0527aea1-d131-3948-a34d-03af39aba8b5.
        name (str): A human-readable name for the credential schema. A piece of Metadata. Example: DrivingLicense.
        version (str): Denotes the revision of a given Credential Schema. It should follow semantic version convention
            to describe the impact of the schema evolution. Example: 1.0.0.
        description (str): A human-readable description of the credential schema Example: Simple credential schema for
            the driving licence verifiable credential..
        type (str): This field resolves to a JSON schema with details about the schema metadata that applies to the
            schema. A piece of Metadata. Example: https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json.
        schema (Any): Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata
            Example: {'$id': 'driving-license-1.0', '$schema': 'https://json-schema.org/draft/2020-12/schema',
            'description': 'Driving License', 'type': 'object', 'properties': {'credentialSubject': {'type': 'object',
            'properties': {'emailAddress': {'type': 'string', 'format': 'email'}, 'givenName': {'type': 'string'},
            'familyName': {'type': 'string'}, 'dateOfIssuance': {'type': 'datetime'}, 'drivingLicenseID': {'type':
            'string'}, 'drivingClass': {'type': 'integer'}, 'required': ['emailAddress', 'familyName', 'dateOfIssuance',
            'drivingLicenseID', 'drivingClass'], 'additionalProperties': True}}}}.
        author (str): DID of the identity which authored the credential schema. A piece of Metadata. Example:
            did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff.
        authored (datetime.datetime): [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential
            schema was created. A piece of Metadata. Example: 2022-03-10 12:00:00+00:00.
        kind (str): A string that identifies the type of resource being returned in the response. Example:
            CredentialSchema.
        self_ (str): The URL that uniquely identifies the resource being returned in the response. Example: /prism-
            agent/schema-registry/schemas/0527aea1-d131-3948-a34d-03af39aba8b4.
        long_id (Union[Unset, str]): Resource id of the credential schema. Contains the `author`'s DID, `id` and
            `version` fields. Example: did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff/0527aea1-
            d131-3948-a34d-03af39aba8b4?version=1.0.0.
        tags (Union[Unset, List[str]]): Tokens that allow to lookup and filter the credential schema records.
        proof (Union[Unset, Proof]): A digital signature over the Credential Schema for the sake of asserting
            authorship. A piece of Metadata. Example: {'type': 'Ed25519Signature2018', 'created': datetime.datetime(2022, 3,
            10, 12, 0, tzinfo=datetime.timezone.utc), 'verificationMethod':
            'did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff#key-1', 'proofPurpose':
            'assertionMethod', 'proofValue': 'FiPfjknHikKmZ...', 'jws':
            'eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il0sImt0eSI6Ik...', 'domain': 'prims.atala.com'}.
    """

    guid: str
    id: str
    name: str
    version: str
    description: str
    type: str
    schema: Any
    author: str
    authored: datetime.datetime
    kind: str
    self_: str
    long_id: Union[Unset, str] = UNSET
    tags: Union[Unset, List[str]] = UNSET
    proof: Union[Unset, "Proof"] = UNSET
    additional_properties: Dict[str, Any] = attr.ib(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        guid = self.guid
        id = self.id
        name = self.name
        version = self.version
        description = self.description
        type = self.type
        schema = self.schema
        author = self.author
        authored = self.authored.isoformat()

        kind = self.kind
        self_ = self.self_
        long_id = self.long_id
        tags: Union[Unset, List[str]] = UNSET
        if not isinstance(self.tags, Unset):
            tags = self.tags

        proof: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.proof, Unset):
            proof = self.proof.to_dict()

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "guid": guid,
                "id": id,
                "name": name,
                "version": version,
                "description": description,
                "type": type,
                "schema": schema,
                "author": author,
                "authored": authored,
                "kind": kind,
                "self": self_,
            }
        )
        if long_id is not UNSET:
            field_dict["longId"] = long_id
        if tags is not UNSET:
            field_dict["tags"] = tags
        if proof is not UNSET:
            field_dict["proof"] = proof

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.proof import Proof

        d = src_dict.copy()
        guid = d.pop("guid")

        id = d.pop("id")

        name = d.pop("name")

        version = d.pop("version")

        description = d.pop("description")

        type = d.pop("type")

        schema = d.pop("schema")

        author = d.pop("author")

        authored = isoparse(d.pop("authored"))

        kind = d.pop("kind")

        self_ = d.pop("self")

        long_id = d.pop("longId", UNSET)

        tags = cast(List[str], d.pop("tags", UNSET))

        _proof = d.pop("proof", UNSET)
        proof: Union[Unset, Proof]
        if isinstance(_proof, Unset):
            proof = UNSET
        else:
            proof = Proof.from_dict(_proof)

        credential_schema_response = cls(
            guid=guid,
            id=id,
            name=name,
            version=version,
            description=description,
            type=type,
            schema=schema,
            author=author,
            authored=authored,
            kind=kind,
            self_=self_,
            long_id=long_id,
            tags=tags,
            proof=proof,
        )

        credential_schema_response.additional_properties = d
        return credential_schema_response

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
