/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptConnectionInvitationRequest,
  Connection,
  ConnectionsPage,
  CreateConnectionRequest,
  ErrorResponse,
} from '../models';
import {
    AcceptConnectionInvitationRequestFromJSON,
    AcceptConnectionInvitationRequestToJSON,
    ConnectionFromJSON,
    ConnectionToJSON,
    ConnectionsPageFromJSON,
    ConnectionsPageToJSON,
    CreateConnectionRequestFromJSON,
    CreateConnectionRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface AcceptConnectionInvitationOperationRequest {
    acceptConnectionInvitationRequest: AcceptConnectionInvitationRequest;
}

export interface CreateConnectionOperationRequest {
    createConnectionRequest: CreateConnectionRequest;
}

export interface GetConnectionRequest {
    connectionId: string;
}

export interface GetConnectionsRequest {
    offset?: number;
    limit?: number;
    thid?: string;
}

/**
 * 
 */
export class ConnectionsManagementApi extends runtime.BaseAPI {

    /**
     *  Accepts an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation, generates a new Peer DID, and submits a Connection Request to the inviter. It returns a connection object in `ConnectionRequestPending` state, until the Connection Request is eventually sent to the inviter by the prism-agent\'s background process. The connection object state will then automatically move to `ConnectionRequestSent`. 
     * Accepts an Out of Band invitation.
     */
    async acceptConnectionInvitationRaw(requestParameters: AcceptConnectionInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.acceptConnectionInvitationRequest === null || requestParameters.acceptConnectionInvitationRequest === undefined) {
            throw new runtime.RequiredError('acceptConnectionInvitationRequest','Required parameter requestParameters.acceptConnectionInvitationRequest was null or undefined when calling acceptConnectionInvitation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connection-invitations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AcceptConnectionInvitationRequestToJSON(requestParameters.acceptConnectionInvitationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     *  Accepts an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation, generates a new Peer DID, and submits a Connection Request to the inviter. It returns a connection object in `ConnectionRequestPending` state, until the Connection Request is eventually sent to the inviter by the prism-agent\'s background process. The connection object state will then automatically move to `ConnectionRequestSent`. 
     * Accepts an Out of Band invitation.
     */
    async acceptConnectionInvitation(requestParameters: AcceptConnectionInvitationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.acceptConnectionInvitationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Generates a new Peer DID and creates an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation. It returns a new connection record in `InvitationGenerated` state. The request body may contain a `label` that can be used as a human readable alias for the connection, for example `{\'label\': \"Bob\"}` 
     * Creates a new connection record and returns an Out of Band invitation.
     */
    async createConnectionRaw(requestParameters: CreateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.createConnectionRequest === null || requestParameters.createConnectionRequest === undefined) {
            throw new runtime.RequiredError('createConnectionRequest','Required parameter requestParameters.createConnectionRequest was null or undefined when calling createConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConnectionRequestToJSON(requestParameters.createConnectionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     *  Generates a new Peer DID and creates an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation. It returns a new connection record in `InvitationGenerated` state. The request body may contain a `label` that can be used as a human readable alias for the connection, for example `{\'label\': \"Bob\"}` 
     * Creates a new connection record and returns an Out of Band invitation.
     */
    async createConnection(requestParameters: CreateConnectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.createConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an existing connection record by its unique identifier
     * Gets an existing connection record by its unique identifier.
     */
    async getConnectionRaw(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Connection>> {
        if (requestParameters.connectionId === null || requestParameters.connectionId === undefined) {
            throw new runtime.RequiredError('connectionId','Required parameter requestParameters.connectionId was null or undefined when calling getConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections/{connectionId}`.replace(`{${"connectionId"}}`, encodeURIComponent(String(requestParameters.connectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionFromJSON(jsonValue));
    }

    /**
     * Gets an existing connection record by its unique identifier
     * Gets an existing connection record by its unique identifier.
     */
    async getConnection(requestParameters: GetConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Connection> {
        const response = await this.getConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of connection records paginated
     * Gets the list of connection records.
     */
    async getConnectionsRaw(requestParameters: GetConnectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectionsPage>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.thid !== undefined) {
            queryParameters['thid'] = requestParameters.thid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionsPageFromJSON(jsonValue));
    }

    /**
     * Get the list of connection records paginated
     * Gets the list of connection records.
     */
    async getConnections(requestParameters: GetConnectionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectionsPage> {
        const response = await this.getConnectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
