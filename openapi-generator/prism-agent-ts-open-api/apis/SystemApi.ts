/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  HealthInfo,
} from '../models';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    HealthInfoFromJSON,
    HealthInfoToJSON,
} from '../models';

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI {

    /**
     * Returns the health info object of the running service
     * As a system user, check the health status of the running service
     */
    async systemHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/_system/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthInfoFromJSON(jsonValue));
    }

    /**
     * Returns the health info object of the running service
     * As a system user, check the health status of the running service
     */
    async systemHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthInfo> {
        const response = await this.systemHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the health info object of the running service
     * As a system user, check the health status of the running service
     */
    async systemMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/_system/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns the health info object of the running service
     * As a system user, check the health status of the running service
     */
    async systemMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.systemMetricsRaw(initOverrides);
        return await response.value();
    }

}
