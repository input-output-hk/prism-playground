/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Service } from './Service';
import {
    ServiceFromJSON,
    ServiceFromJSONTyped,
    ServiceToJSON,
} from './Service';
import type { VerificationMethod } from './VerificationMethod';
import {
    VerificationMethodFromJSON,
    VerificationMethodFromJSONTyped,
    VerificationMethodToJSON,
} from './VerificationMethod';

/**
 * A W3C compliant Prism DID document representation.
 * @export
 * @interface DIDDocument
 */
export interface DIDDocument {
    /**
     * The JSON-LD context for the DID resolution result.
     * @type {Array<string>}
     * @memberof DIDDocument
     */
    context?: Array<string>;
    /**
     * [DID subject](https://www.w3.org/TR/did-core/#did-subject).
     * The value must match the DID that was given to the resolver.
     * @type {string}
     * @memberof DIDDocument
     */
    id: string;
    /**
     * [DID controller](https://www.w3.org/TR/did-core/#did-controller)
     * @type {string}
     * @memberof DIDDocument
     */
    controller?: string;
    /**
     * 
     * @type {Array<VerificationMethod>}
     * @memberof DIDDocument
     */
    verificationMethod?: Array<VerificationMethod>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DIDDocument
     */
    authentication?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DIDDocument
     */
    assertionMethod?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DIDDocument
     */
    keyAgreement?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DIDDocument
     */
    capabilityInvocation?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DIDDocument
     */
    capabilityDelegation?: Array<string>;
    /**
     * 
     * @type {Array<Service>}
     * @memberof DIDDocument
     */
    service?: Array<Service>;
}

/**
 * Check if a given object implements the DIDDocument interface.
 */
export function instanceOfDIDDocument(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function DIDDocumentFromJSON(json: any): DIDDocument {
    return DIDDocumentFromJSONTyped(json, false);
}

export function DIDDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): DIDDocument {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'context': !exists(json, '@context') ? undefined : json['@context'],
        'id': json['id'],
        'controller': !exists(json, 'controller') ? undefined : json['controller'],
        'verificationMethod': !exists(json, 'verificationMethod') ? undefined : ((json['verificationMethod'] as Array<any>).map(VerificationMethodFromJSON)),
        'authentication': !exists(json, 'authentication') ? undefined : json['authentication'],
        'assertionMethod': !exists(json, 'assertionMethod') ? undefined : json['assertionMethod'],
        'keyAgreement': !exists(json, 'keyAgreement') ? undefined : json['keyAgreement'],
        'capabilityInvocation': !exists(json, 'capabilityInvocation') ? undefined : json['capabilityInvocation'],
        'capabilityDelegation': !exists(json, 'capabilityDelegation') ? undefined : json['capabilityDelegation'],
        'service': !exists(json, 'service') ? undefined : ((json['service'] as Array<any>).map(ServiceFromJSON)),
    };
}

export function DIDDocumentToJSON(value?: DIDDocument | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '@context': value.context,
        'id': value.id,
        'controller': value.controller,
        'verificationMethod': value.verificationMethod === undefined ? undefined : ((value.verificationMethod as Array<any>).map(VerificationMethodToJSON)),
        'authentication': value.authentication,
        'assertionMethod': value.assertionMethod,
        'keyAgreement': value.keyAgreement,
        'capabilityInvocation': value.capabilityInvocation,
        'capabilityDelegation': value.capabilityDelegation,
        'service': value.service === undefined ? undefined : ((value.service as Array<any>).map(ServiceToJSON)),
    };
}

