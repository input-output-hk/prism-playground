/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * [DID resolution metadata](https://www.w3.org/TR/did-core/#did-resolution-metadata)
 * @export
 * @interface DIDResolutionMetadata
 */
export interface DIDResolutionMetadata {
    /**
     * Resolution error constant according to [DID spec registries](https://www.w3.org/TR/did-spec-registries/#error)
     * @type {string}
     * @memberof DIDResolutionMetadata
     */
    error?: string;
    /**
     * Resolution error message
     * @type {string}
     * @memberof DIDResolutionMetadata
     */
    errorMessage?: string;
    /**
     * The media type of the returned DID document
     * @type {string}
     * @memberof DIDResolutionMetadata
     */
    contentType?: string;
}

/**
 * Check if a given object implements the DIDResolutionMetadata interface.
 */
export function instanceOfDIDResolutionMetadata(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DIDResolutionMetadataFromJSON(json: any): DIDResolutionMetadata {
    return DIDResolutionMetadataFromJSONTyped(json, false);
}

export function DIDResolutionMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): DIDResolutionMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': !exists(json, 'error') ? undefined : json['error'],
        'errorMessage': !exists(json, 'errorMessage') ? undefined : json['errorMessage'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
    };
}

export function DIDResolutionMetadataToJSON(value?: DIDResolutionMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'errorMessage': value.errorMessage,
        'contentType': value.contentType,
    };
}

