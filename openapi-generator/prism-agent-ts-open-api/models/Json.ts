/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    Arr,
    instanceOfArr,
    ArrFromJSON,
    ArrFromJSONTyped,
    ArrToJSON,
} from './Arr';
import {
    Bool,
    instanceOfBool,
    BoolFromJSON,
    BoolFromJSONTyped,
    BoolToJSON,
} from './Bool';
import {
    Num,
    instanceOfNum,
    NumFromJSON,
    NumFromJSONTyped,
    NumToJSON,
} from './Num';
import {
    Str,
    instanceOfStr,
    StrFromJSON,
    StrFromJSONTyped,
    StrToJSON,
} from './Str';
import {
    object,
    instanceOfobject,
    objectFromJSON,
    objectFromJSONTyped,
    objectToJSON,
} from './object';

/**
 * @type Json
 * The service endpoint. Can contain multiple possible values as described in the [Create DID operation]
 * @export
 */
export type Json = Arr | Bool | Num | Str | object;

export function JsonFromJSON(json: any): Json {
    return JsonFromJSONTyped(json, false);
}

export function JsonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Json {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return { ...ArrFromJSONTyped(json, true), ...BoolFromJSONTyped(json, true), ...NumFromJSONTyped(json, true), ...StrFromJSONTyped(json, true), ...objectFromJSONTyped(json, true) };
}

export function JsonToJSON(value?: Json | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (instanceOfArr(value)) {
        return ArrToJSON(value as Arr);
    }
    if (instanceOfBool(value)) {
        return BoolToJSON(value as Bool);
    }
    if (instanceOfNum(value)) {
        return NumToJSON(value as Num);
    }
    if (instanceOfStr(value)) {
        return StrToJSON(value as Str);
    }
    if (instanceOfobject(value)) {
        return objectToJSON(value as object);
    }

    return {};
}

