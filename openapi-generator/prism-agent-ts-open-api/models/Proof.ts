/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A digital signature over the Credential Schema for the sake of asserting authorship. A piece of Metadata.
 * @export
 * @interface Proof
 */
export interface Proof {
    /**
     * The type of cryptographic signature algorithm used to generate the proof.
     * @type {string}
     * @memberof Proof
     */
    type: string;
    /**
     * The date and time at which the proof was created, in UTC format. This field is used to ensure that the proof was generated before or at the same time as the credential schema itself.
     * @type {Date}
     * @memberof Proof
     */
    created: Date;
    /**
     * The verification method used to generate the proof. This is usually a DID and key ID combination that can be used to look up the public key needed to verify the proof.
     * @type {string}
     * @memberof Proof
     */
    verificationMethod: string;
    /**
     * The purpose of the proof (for example: `assertionMethod`). This indicates that the proof is being used to assert that the issuer really issued this credential schema instance.
     * @type {string}
     * @memberof Proof
     */
    proofPurpose: string;
    /**
     * The cryptographic signature value that was generated using the private key associated with the verification method, and which can be used to verify the proof.
     * @type {string}
     * @memberof Proof
     */
    proofValue: string;
    /**
     * The JSON Web Signature (JWS) that contains the proof information.
     * @type {string}
     * @memberof Proof
     */
    jws: string;
    /**
     * It specifies the domain context within which the credential schema and proof are being used
     * @type {string}
     * @memberof Proof
     */
    domain?: string;
}

/**
 * Check if a given object implements the Proof interface.
 */
export function instanceOfProof(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "verificationMethod" in value;
    isInstance = isInstance && "proofPurpose" in value;
    isInstance = isInstance && "proofValue" in value;
    isInstance = isInstance && "jws" in value;

    return isInstance;
}

export function ProofFromJSON(json: any): Proof {
    return ProofFromJSONTyped(json, false);
}

export function ProofFromJSONTyped(json: any, ignoreDiscriminator: boolean): Proof {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'created': (new Date(json['created'])),
        'verificationMethod': json['verificationMethod'],
        'proofPurpose': json['proofPurpose'],
        'proofValue': json['proofValue'],
        'jws': json['jws'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
    };
}

export function ProofToJSON(value?: Proof | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'created': (value.created.toISOString()),
        'verificationMethod': value.verificationMethod,
        'proofPurpose': value.proofPurpose,
        'proofValue': value.proofValue,
        'jws': value.jws,
        'domain': value.domain,
    };
}

