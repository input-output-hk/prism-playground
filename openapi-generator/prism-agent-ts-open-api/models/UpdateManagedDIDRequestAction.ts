/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActionType } from './ActionType';
import {
    ActionTypeFromJSON,
    ActionTypeFromJSONTyped,
    ActionTypeToJSON,
} from './ActionType';
import type { ManagedDIDKeyTemplate } from './ManagedDIDKeyTemplate';
import {
    ManagedDIDKeyTemplateFromJSON,
    ManagedDIDKeyTemplateFromJSONTyped,
    ManagedDIDKeyTemplateToJSON,
} from './ManagedDIDKeyTemplate';
import type { RemoveEntryById } from './RemoveEntryById';
import {
    RemoveEntryByIdFromJSON,
    RemoveEntryByIdFromJSONTyped,
    RemoveEntryByIdToJSON,
} from './RemoveEntryById';
import type { Service } from './Service';
import {
    ServiceFromJSON,
    ServiceFromJSONTyped,
    ServiceToJSON,
} from './Service';
import type { UpdateManagedDIDServiceAction } from './UpdateManagedDIDServiceAction';
import {
    UpdateManagedDIDServiceActionFromJSON,
    UpdateManagedDIDServiceActionFromJSONTyped,
    UpdateManagedDIDServiceActionToJSON,
} from './UpdateManagedDIDServiceAction';

/**
 * A list of actions to perform on DID document.
 * The field `addKey`, `removeKey`, `addService`, `removeService`, `updateService` must corresponds to
 * the `actionType` specified. For example, `addKey` must be present when `actionType` is `ADD_KEY`.
 * @export
 * @interface UpdateManagedDIDRequestAction
 */
export interface UpdateManagedDIDRequestAction {
    /**
     * 
     * @type {ActionType}
     * @memberof UpdateManagedDIDRequestAction
     */
    actionType: ActionType;
    /**
     * 
     * @type {ManagedDIDKeyTemplate}
     * @memberof UpdateManagedDIDRequestAction
     */
    addKey?: ManagedDIDKeyTemplate;
    /**
     * 
     * @type {RemoveEntryById}
     * @memberof UpdateManagedDIDRequestAction
     */
    removeKey?: RemoveEntryById;
    /**
     * 
     * @type {Service}
     * @memberof UpdateManagedDIDRequestAction
     */
    addService?: Service;
    /**
     * 
     * @type {RemoveEntryById}
     * @memberof UpdateManagedDIDRequestAction
     */
    removeService?: RemoveEntryById;
    /**
     * 
     * @type {UpdateManagedDIDServiceAction}
     * @memberof UpdateManagedDIDRequestAction
     */
    updateService?: UpdateManagedDIDServiceAction;
}

/**
 * Check if a given object implements the UpdateManagedDIDRequestAction interface.
 */
export function instanceOfUpdateManagedDIDRequestAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "actionType" in value;

    return isInstance;
}

export function UpdateManagedDIDRequestActionFromJSON(json: any): UpdateManagedDIDRequestAction {
    return UpdateManagedDIDRequestActionFromJSONTyped(json, false);
}

export function UpdateManagedDIDRequestActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateManagedDIDRequestAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionType': ActionTypeFromJSON(json['actionType']),
        'addKey': !exists(json, 'addKey') ? undefined : ManagedDIDKeyTemplateFromJSON(json['addKey']),
        'removeKey': !exists(json, 'removeKey') ? undefined : RemoveEntryByIdFromJSON(json['removeKey']),
        'addService': !exists(json, 'addService') ? undefined : ServiceFromJSON(json['addService']),
        'removeService': !exists(json, 'removeService') ? undefined : RemoveEntryByIdFromJSON(json['removeService']),
        'updateService': !exists(json, 'updateService') ? undefined : UpdateManagedDIDServiceActionFromJSON(json['updateService']),
    };
}

export function UpdateManagedDIDRequestActionToJSON(value?: UpdateManagedDIDRequestAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionType': ActionTypeToJSON(value.actionType),
        'addKey': ManagedDIDKeyTemplateToJSON(value.addKey),
        'removeKey': RemoveEntryByIdToJSON(value.removeKey),
        'addService': ServiceToJSON(value.addService),
        'removeService': RemoveEntryByIdToJSON(value.removeService),
        'updateService': UpdateManagedDIDServiceActionToJSON(value.updateService),
    };
}

