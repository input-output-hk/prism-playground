/* tslint:disable */
/* eslint-disable */
/**
 * Prism Agent
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { VerificationPolicyConstraint } from './VerificationPolicyConstraint';
import {
    VerificationPolicyConstraintFromJSON,
    VerificationPolicyConstraintFromJSONTyped,
    VerificationPolicyConstraintToJSON,
} from './VerificationPolicyConstraint';

/**
 * 
 * @export
 * @interface VerificationPolicy
 */
export interface VerificationPolicy {
    /**
     * 
     * @type {string}
     * @memberof VerificationPolicy
     */
    self: string;
    /**
     * 
     * @type {string}
     * @memberof VerificationPolicy
     */
    kind: string;
    /**
     * 
     * @type {string}
     * @memberof VerificationPolicy
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof VerificationPolicy
     */
    nonce: number;
    /**
     * 
     * @type {string}
     * @memberof VerificationPolicy
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof VerificationPolicy
     */
    description: string;
    /**
     * 
     * @type {Date}
     * @memberof VerificationPolicy
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof VerificationPolicy
     */
    updatedAt: Date;
    /**
     * 
     * @type {Array<VerificationPolicyConstraint>}
     * @memberof VerificationPolicy
     */
    constraints?: Array<VerificationPolicyConstraint>;
}

/**
 * Check if a given object implements the VerificationPolicy interface.
 */
export function instanceOfVerificationPolicy(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "self" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "nonce" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;

    return isInstance;
}

export function VerificationPolicyFromJSON(json: any): VerificationPolicy {
    return VerificationPolicyFromJSONTyped(json, false);
}

export function VerificationPolicyFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerificationPolicy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'self': json['self'],
        'kind': json['kind'],
        'id': json['id'],
        'nonce': json['nonce'],
        'name': json['name'],
        'description': json['description'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'constraints': !exists(json, 'constraints') ? undefined : ((json['constraints'] as Array<any>).map(VerificationPolicyConstraintFromJSON)),
    };
}

export function VerificationPolicyToJSON(value?: VerificationPolicy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'self': value.self,
        'kind': value.kind,
        'id': value.id,
        'nonce': value.nonce,
        'name': value.name,
        'description': value.description,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'constraints': value.constraints === undefined ? undefined : ((value.constraints as Array<any>).map(VerificationPolicyConstraintToJSON)),
    };
}

